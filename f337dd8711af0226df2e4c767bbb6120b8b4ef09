{
  "comments": [
    {
      "key": {
        "uuid": "ff1c3a69_59be2094",
        "filename": "recipes-core/base-files/base-files_%.bbappend",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-17T17:06:27Z",
      "side": 1,
      "message": "There is an assumption here that IMAGE_FEATURES is being set from the global configuration, which is a violation of best practices[1].  Bitbake users expect something like this to work:\n\n some_image.bbappend:\n\n IMAGE_FEATURES_append \u003d \" obmc-privilege-separation\"\n\nbut the base_files recipe would never see obmc-privilege-separation if set this way because IMAGE_FEATURES is not in the global configuration.  This same assumption is made in the next patch in this series in the dbus-perms recipe.\n\nIf this must be configurable (more on this below), and you need to be adding logic around this flag in random recipes throughout the tree, then it can\u0027t be an image feature - rather, it has to be a distro feature.\n \n[1] https://www.yoctoproject.org/docs/latest/mega-manual/mega-manual.html#usingpoky-extend-customimage-imagefeatures",
      "range": {
        "startLine": 13,
        "startChar": 35,
        "endLine": 13,
        "endChar": 49
      },
      "revId": "f337dd8711af0226df2e4c767bbb6120b8b4ef09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab4a41e3_0d3e2cca",
        "filename": "recipes-core/base-files/base-files_%.bbappend",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1000064
      },
      "writtenOn": "2020-12-18T00:18:02Z",
      "side": 1,
      "message": "I set image features from local.conf. And the per-target local.conf.sample should have it at the early stage of development (explained in other comment above). Thus, it catched by base_files recipes. Otherwise, it wouldn\u0027t work for me when I\u0027ve tested it.\n\nFrom my understanding (https://www.yoctoproject.org/pipermail/yocto/2017-January/034171.html), DISTRO_FEATURES is globally applied to the targets. Thus, that seems like COMBINED_FEATURES is more relevant candidate.",
      "parentUuid": "ff1c3a69_59be2094",
      "range": {
        "startLine": 13,
        "startChar": 35,
        "endLine": 13,
        "endChar": 49
      },
      "revId": "f337dd8711af0226df2e4c767bbb6120b8b4ef09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13b04871_d8e7dd13",
        "filename": "recipes-core/base-files/base-files_%.bbappend",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-18T17:50:36Z",
      "side": 1,
      "message": "\u003e DISTRO_FEATURES is globally applied to the targets.\n\nCorrect.  You\u0027d have one set of distro policy that enables priv-separation and another set that does not.  For a given target, you can build with either policy set (or both).\n\n\u003e  that seems like COMBINED_FEATURES is more relevant candidate\n\nUse this metric to determine if something is a MACHINE_FEATURE or a DISTRO_FEATURE:\n\n Does the hardware on \u003cMACHINE\u003e support \u003cFEATURE\u003e?\n\nIf the question makes sense after substituting the feature in question then FEATURE is a MACHINE_FEATURE.  In this case:\n\n Does the hardware on witherspoon support privilege separation?\n\nThis is non-sensical - privilege separation has nothing to do with hardware, it a software feature only, thus it is not a MACHINE_FEATURE and COMBINED_FEATURES is not appropriate.",
      "parentUuid": "ab4a41e3_0d3e2cca",
      "range": {
        "startLine": 13,
        "startChar": 35,
        "endLine": 13,
        "endChar": 49
      },
      "revId": "f337dd8711af0226df2e4c767bbb6120b8b4ef09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4770de05_2238d8d0",
        "filename": "recipes-core/systemd/systemd_%.bbappend",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-11-18T18:44:23Z",
      "side": 1,
      "message": "I have yet to understand why this needs to be configurable.",
      "revId": "f337dd8711af0226df2e4c767bbb6120b8b4ef09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b187818f_bfe718c2",
        "filename": "recipes-core/systemd/systemd_%.bbappend",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000064
      },
      "writtenOn": "2020-11-18T19:51:07Z",
      "side": 1,
      "message": "As per earlier discussion, this increases the image size and might be a problem for witherspoon targets. Additionally, the privilege separation should be enabled platform-by-platform, thus, covered by image feature flag.",
      "parentUuid": "4770de05_2238d8d0",
      "revId": "f337dd8711af0226df2e4c767bbb6120b8b4ef09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d7921d0_00bf4d43",
        "filename": "recipes-core/systemd/systemd_%.bbappend",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-17T17:06:27Z",
      "side": 1,
      "message": "\u003e As per earlier discussion, this increases the image size\n\nI expect there are exactly zero people that would be upset by the modest size increase here, considering what you get in return.  So I still don\u0027t understand the rationale for making this configurable.  If you can find someone that doesn\u0027t want privilege separation on their OpenBMC based BMC I\u0027ll quit asking about it but I don\u0027t think there are any...\n\n\u003e and might be a problem for witherspoon targets.\n\nThis patch was automatically tested on a witherspoon:\n\n\u003e Build Successful                                                                                               \n\u003e IBM Hardware CI : witherspoon hardware tests passed         \n\nThese lines mean there weren\u0027t any problems with it.\n\n\u003e the privilege separation should be enabled platform-by-platform\n\nIn light of what I\u0027ve said above, do you still feel this way?  If so, can you explain why?",
      "parentUuid": "b187818f_bfe718c2",
      "revId": "f337dd8711af0226df2e4c767bbb6120b8b4ef09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67539a3b_3cd5a59f",
        "filename": "recipes-core/systemd/systemd_%.bbappend",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000064
      },
      "writtenOn": "2020-12-18T00:18:02Z",
      "side": 1,
      "message": "This patch is only a little percent of the upcoming change that introduces the image feature flag.\nThe reason why we need this flag (that is OFF by default) to not break everything. The next changes (some of them seen in \"WIP: ...\" PR) makes things incompatible and require to change more and more stuff across different repos at once. To make the process smooth, we need the flag. In first steps the flag will be enabled only through the local.conf file during development. Next it will be enabled for qemu target and then one by one for other platforms.\n\nFor instance, some daemons are dependant to each other. Some third-party vendors\u0027 stuff might be also relies on the original behaviour, filepremissions and running under the root user.\n\n\u003e If you can find someone that doesn\u0027t want privilege separation on their OpenBMC based BMC I\u0027ll quit asking about it but I don\u0027t think there are any...\nThere was some who are more size-constrained rather than security-agnostic. At the end, the priv separation wouldn\u0027t be just a +200k change to the image.\n\nNSS module is pretty small, but even then it might break Witherspoon targets. CI has passed at least because the flag is not enabled. There were several discussions. Sometimes, the image might build well, but it fails with flashing or system bootup on the real hardware.\n\n\u003e In light of what I\u0027ve said above, do you still feel this way?  If so, can you explain why?\n\nAvoiding use of the feature flags will just break everyone with the follow-up changes. That\u0027s the normal practice when introducing incompatible changes.",
      "parentUuid": "8d7921d0_00bf4d43",
      "revId": "f337dd8711af0226df2e4c767bbb6120b8b4ef09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d15c63d6_d3a9454b",
        "filename": "recipes-core/systemd/systemd_%.bbappend",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-12-18T17:50:52Z",
      "side": 1,
      "message": "\u003e CI has passed at least because the flag is not enabled.\n\nOops :-).  Yes I remember now.  Let me see if I can get it to fit.  \n\n\u003e be enabled for qemu target \n\nFYI OpenBMC doesn\u0027t support the qemuXXX targets that come with Yocto anymore.  Many targets with OpenBMC support do have models in upstream QEMU though, and those all work.\n\n\u003e Some third-party vendors\u0027 stuff might be also relies on the original behaviour,\n\nThis is not a problem - we absolutely do not work around code that we can\u0027t see in OpenBMC.\n\n\u003e Avoiding use of the feature flags will just break everyone with the follow-up changes. That\u0027s the normal practice when introducing incompatible changes.\n\nOf course.  And this what I\u0027m challenging, not the feature flag itself.  I don\u0027t understand why this can\u0027t be done in a way that is compatible.  For example, why can\u0027t the DBus ACLs include both root and the dynamic user until all the (upstream) code has been fixed up?  I\u0027m happy to be wrong, please just help me understand why it isn\u0027t possible.",
      "parentUuid": "67539a3b_3cd5a59f",
      "revId": "f337dd8711af0226df2e4c767bbb6120b8b4ef09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19f2f800_77f746d6",
        "filename": "recipes-core/systemd/systemd_%.bbappend",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000064
      },
      "writtenOn": "2020-12-18T21:47:24Z",
      "side": 1,
      "message": "\u003e FYI OpenBMC doesn\u0027t support the qemuXXX targets that come with Yocto anymore.  Many targets with OpenBMC support do have models in upstream QEMU though, and those all work.\n\nI use meta-phosphor/conf template that has qemuarm machine by default.\n\n\u003e This is not a problem - we absolutely do not work around code that we can\u0027t see in OpenBMC.\n\nThere are a number of vendor-specific meta-* in the base openbmc repo. Thus, this priv-separation feature couldn\u0027t be available everywhere at once.\n\n\u003e Of course.  And this what I\u0027m challenging, not the feature flag itself.  I don\u0027t understand why this can\u0027t be done in a way that is compatible.  For example, why can\u0027t the DBus ACLs include both root and the dynamic user until all the (upstream) code has been fixed up? \n\nDynamic users is just a small part of the changes. Even then, we can not simply mix regular users and root user because some daemons have shared access to the same file system resources, thus, have the same permissions (at least, common group). You can check next WIP gerrit that will be splitted in several smaller changes:\n\n   https://gerrit.openbmc-project.xyz/c/openbmc/meta-phosphor/+/37844/2\n\nMoreover, the changed ACLs or filepermissions might be incomplete or wrong that might cause outages. That the major reason to keep priv-separation work covered by the flag.",
      "parentUuid": "d15c63d6_d3a9454b",
      "revId": "f337dd8711af0226df2e4c767bbb6120b8b4ef09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}